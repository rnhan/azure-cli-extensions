# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "container-storage pool create",
)
class Create(AAZCommand):
    """Create a Pool

    :example: Create a Storage Pool.
        az container-storage pool create -g "rg" -n "pool" --pool-type "{ephemeralDisk:{replicas:3}}" --resources "{requests:{storage:2048}}" -l "eastus2"
    """

    _aaz_info = {
        "version": "2023-07-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.containerstorage/pools/{}", "2023-07-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.pool_name = AAZStrArg(
            options=["-n", "--name", "--pool-name"],
            help="Pool Object",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]$",
                max_length=253,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.assignments = AAZListArg(
            options=["--assignments"],
            arg_group="Properties",
            help="List of resources that should have access to the pool. Typically ARM references to AKS clusters or ACI Container Groups. For local and standard this must be a single reference. For ElasticSAN there can be many.",
        )
        _args_schema.pool_type = AAZObjectArg(
            options=["--pool-type"],
            arg_group="Properties",
            help="Type of the Pool: ephemeralDisk, azureDisk, or elasticsan.",
        )
        _args_schema.reclaim_policy = AAZStrArg(
            options=["--reclaim-policy"],
            arg_group="Properties",
            help="ReclaimPolicy defines what happens to the backend storage when StoragePool is deleted",
            enum={"Delete": "Delete", "Retain": "Retain"},
        )
        _args_schema.resources = AAZObjectArg(
            options=["--resources"],
            arg_group="Properties",
            help="Resources represent the resources the pool should have.",
        )
        _args_schema.zones = AAZListArg(
            options=["--zones"],
            arg_group="Properties",
            help="List of availability zones that resources can be created in.",
        )

        assignments = cls._args_schema.assignments
        assignments.Element = AAZObjectArg()

        _element = cls._args_schema.assignments.Element
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource id for the assigned resource",
            required=True,
        )

        pool_type = cls._args_schema.pool_type
        pool_type.azure_disk = AAZObjectArg(
            options=["azure-disk"],
            help="Disk Pool Properties",
        )
        pool_type.elastic_san = AAZObjectArg(
            options=["elastic-san"],
            help="Elastic San Pool Properties",
        )
        pool_type.ephemeral_disk = AAZObjectArg(
            options=["ephemeral-disk"],
            help="Ephemeral Pool Properties",
        )

        azure_disk = cls._args_schema.pool_type.azure_disk
        azure_disk.disks = AAZListArg(
            options=["disks"],
            help="Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).",
        )
        azure_disk.encryption = AAZObjectArg(
            options=["encryption"],
            help="Encryption specifies the encryption configuration for the Azure Disk pool",
        )
        azure_disk.sku_name = AAZStrArg(
            options=["sku-name"],
            help="Sku name",
            enum={"PremiumV2_LRS": "PremiumV2_LRS", "Premium_LRS": "Premium_LRS", "Premium_ZRS": "Premium_ZRS", "StandardSSD_LRS": "StandardSSD_LRS", "StandardSSD_ZRS": "StandardSSD_ZRS", "Standard_LRS": "Standard_LRS", "UltraSSD_LRS": "UltraSSD_LRS"},
        )

        disks = cls._args_schema.pool_type.azure_disk.disks
        disks.Element = AAZObjectArg()
        cls._build_args_disk_create(disks.Element)

        encryption = cls._args_schema.pool_type.azure_disk.encryption
        encryption.identity = AAZObjectArg(
            options=["identity"],
            help="The managed service identities assigned to this resource.",
        )
        cls._build_args_managed_service_identity_create(encryption.identity)
        encryption.key_name = AAZStrArg(
            options=["key-name"],
            help="The name of the key vault key.",
            required=True,
        )
        encryption.key_vault_uri = AAZStrArg(
            options=["key-vault-uri"],
            help="The URI of the key vault.",
            required=True,
        )

        elastic_san = cls._args_schema.pool_type.elastic_san
        elastic_san.encryption = AAZObjectArg(
            options=["encryption"],
            help="Encryption specifies the encryption configuration for the Azure Disk pool",
        )
        elastic_san.sku_name = AAZStrArg(
            options=["sku-name"],
            help="Sku name",
            enum={"Premium_LRS": "Premium_LRS", "Premium_ZRS": "Premium_ZRS"},
        )

        encryption = cls._args_schema.pool_type.elastic_san.encryption
        encryption.identity = AAZObjectArg(
            options=["identity"],
            help="The managed service identities assigned to this resource.",
        )
        cls._build_args_managed_service_identity_create(encryption.identity)
        encryption.key_name = AAZStrArg(
            options=["key-name"],
            help="The name of the key vault key.",
            required=True,
        )
        encryption.key_vault_uri = AAZStrArg(
            options=["key-vault-uri"],
            help="The URI of the key vault.",
            required=True,
        )

        ephemeral_disk = cls._args_schema.pool_type.ephemeral_disk
        ephemeral_disk.disks = AAZListArg(
            options=["disks"],
            help="Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).",
        )
        ephemeral_disk.replicas = AAZIntArg(
            options=["replicas"],
            help="The number of data copies. Default 3.",
            default=3,
            fmt=AAZIntArgFormat(
                maximum=3,
                minimum=1,
            ),
        )

        disks = cls._args_schema.pool_type.ephemeral_disk.disks
        disks.Element = AAZObjectArg()
        cls._build_args_disk_create(disks.Element)

        resources = cls._args_schema.resources
        resources.requests = AAZObjectArg(
            options=["requests"],
            help="Requests for capacity for the pool.",
        )

        requests = cls._args_schema.resources.requests
        requests.storage = AAZIntArg(
            options=["storage"],
            help="Requested capacity of the pool in GiB.",
            default=1024,
            fmt=AAZIntArgFormat(
                maximum=65536,
                minimum=1024,
            ),
        )

        zones = cls._args_schema.zones
        zones.Element = AAZStrArg(
            enum={"1": "1", "2": "2", "3": "3"},
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    _args_disk_create = None

    @classmethod
    def _build_args_disk_create(cls, _schema):
        if cls._args_disk_create is not None:
            _schema.id = cls._args_disk_create.id
            _schema.reference = cls._args_disk_create.reference
            return

        cls._args_disk_create = AAZObjectArg()

        disk_create = cls._args_disk_create
        disk_create.id = AAZStrArg(
            options=["id"],
            help="ID is the disk identifier visible to the OS. It is typically the WWN or disk ID in formats such as eui.e8238fa6bf530001001b448b45263379 or 0x5002cf6cbc5dd460",
            required=True,
        )
        disk_create.reference = AAZStrArg(
            options=["reference"],
            help="Reference is the location of the disk in an external system.",
            required=True,
        )

        _schema.id = cls._args_disk_create.id
        _schema.reference = cls._args_disk_create.reference

    _args_managed_service_identity_create = None

    @classmethod
    def _build_args_managed_service_identity_create(cls, _schema):
        if cls._args_managed_service_identity_create is not None:
            _schema.type = cls._args_managed_service_identity_create.type
            _schema.user_assigned_identities = cls._args_managed_service_identity_create.user_assigned_identities
            return

        cls._args_managed_service_identity_create = AAZObjectArg()

        managed_service_identity_create = cls._args_managed_service_identity_create
        managed_service_identity_create.type = AAZStrArg(
            options=["type"],
            help="Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
            required=True,
            enum={"None": "None", "SystemAssigned": "SystemAssigned", "SystemAssigned, UserAssigned": "SystemAssigned, UserAssigned", "UserAssigned": "UserAssigned"},
        )
        managed_service_identity_create.user_assigned_identities = AAZDictArg(
            options=["user-assigned-identities"],
            help="The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
        )

        user_assigned_identities = cls._args_managed_service_identity_create.user_assigned_identities
        user_assigned_identities.Element = AAZObjectArg(
            blank={},
        )

        _schema.type = cls._args_managed_service_identity_create.type
        _schema.user_assigned_identities = cls._args_managed_service_identity_create.user_assigned_identities

    def _execute_operations(self):
        self.pre_operations()
        yield self.PoolsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class PoolsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerStorage/pools/{poolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "poolName", self.ctx.args.pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-07-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("assignments", AAZListType, ".assignments")
                properties.set_prop("poolType", AAZObjectType, ".pool_type", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("reclaimPolicy", AAZStrType, ".reclaim_policy")
                properties.set_prop("resources", AAZObjectType, ".resources")
                properties.set_prop("zones", AAZListType, ".zones")

            assignments = _builder.get(".properties.assignments")
            if assignments is not None:
                assignments.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.assignments[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id", typ_kwargs={"flags": {"required": True}})

            pool_type = _builder.get(".properties.poolType")
            if pool_type is not None:
                pool_type.set_prop("azureDisk", AAZObjectType, ".azure_disk")
                pool_type.set_prop("elasticSan", AAZObjectType, ".elastic_san")
                pool_type.set_prop("ephemeralDisk", AAZObjectType, ".ephemeral_disk")

            azure_disk = _builder.get(".properties.poolType.azureDisk")
            if azure_disk is not None:
                azure_disk.set_prop("disks", AAZListType, ".disks")
                azure_disk.set_prop("encryption", AAZObjectType, ".encryption")
                azure_disk.set_prop("skuName", AAZStrType, ".sku_name")

            disks = _builder.get(".properties.poolType.azureDisk.disks")
            if disks is not None:
                _CreateHelper._build_schema_disk_create(disks.set_elements(AAZObjectType, "."))

            encryption = _builder.get(".properties.poolType.azureDisk.encryption")
            if encryption is not None:
                _CreateHelper._build_schema_managed_service_identity_create(encryption.set_prop("identity", AAZObjectType, ".identity"))
                encryption.set_prop("keyName", AAZStrType, ".key_name", typ_kwargs={"flags": {"required": True}})
                encryption.set_prop("keyVaultUri", AAZStrType, ".key_vault_uri", typ_kwargs={"flags": {"required": True}})

            elastic_san = _builder.get(".properties.poolType.elasticSan")
            if elastic_san is not None:
                elastic_san.set_prop("encryption", AAZObjectType, ".encryption")
                elastic_san.set_prop("skuName", AAZStrType, ".sku_name")

            encryption = _builder.get(".properties.poolType.elasticSan.encryption")
            if encryption is not None:
                _CreateHelper._build_schema_managed_service_identity_create(encryption.set_prop("identity", AAZObjectType, ".identity"))
                encryption.set_prop("keyName", AAZStrType, ".key_name", typ_kwargs={"flags": {"required": True}})
                encryption.set_prop("keyVaultUri", AAZStrType, ".key_vault_uri", typ_kwargs={"flags": {"required": True}})

            ephemeral_disk = _builder.get(".properties.poolType.ephemeralDisk")
            if ephemeral_disk is not None:
                ephemeral_disk.set_prop("disks", AAZListType, ".disks")
                ephemeral_disk.set_prop("replicas", AAZIntType, ".replicas")

            disks = _builder.get(".properties.poolType.ephemeralDisk.disks")
            if disks is not None:
                _CreateHelper._build_schema_disk_create(disks.set_elements(AAZObjectType, "."))

            resources = _builder.get(".properties.resources")
            if resources is not None:
                resources.set_prop("requests", AAZObjectType, ".requests")

            requests = _builder.get(".properties.resources.requests")
            if requests is not None:
                requests.set_prop("storage", AAZIntType, ".storage")

            zones = _builder.get(".properties.zones")
            if zones is not None:
                zones.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.assignments = AAZListType()
            properties.pool_type = AAZObjectType(
                serialized_name="poolType",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )
            properties.reclaim_policy = AAZStrType(
                serialized_name="reclaimPolicy",
            )
            properties.resources = AAZObjectType()
            properties.status = AAZObjectType()
            properties.zones = AAZListType()

            assignments = cls._schema_on_200_201.properties.assignments
            assignments.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.assignments.Element
            _element.id = AAZStrType(
                flags={"required": True},
            )
            _element.status = AAZObjectType()

            status = cls._schema_on_200_201.properties.assignments.Element.status
            status.message = AAZStrType()
            status.state = AAZStrType(
                flags={"required": True},
            )

            pool_type = cls._schema_on_200_201.properties.pool_type
            pool_type.azure_disk = AAZObjectType(
                serialized_name="azureDisk",
            )
            pool_type.elastic_san = AAZObjectType(
                serialized_name="elasticSan",
            )
            pool_type.ephemeral_disk = AAZObjectType(
                serialized_name="ephemeralDisk",
            )

            azure_disk = cls._schema_on_200_201.properties.pool_type.azure_disk
            azure_disk.disks = AAZListType()
            azure_disk.encryption = AAZObjectType()
            azure_disk.resource_group = AAZStrType(
                serialized_name="resourceGroup",
                flags={"read_only": True},
            )
            azure_disk.sku_name = AAZStrType(
                serialized_name="skuName",
            )

            disks = cls._schema_on_200_201.properties.pool_type.azure_disk.disks
            disks.Element = AAZObjectType()
            _CreateHelper._build_schema_disk_read(disks.Element)

            encryption = cls._schema_on_200_201.properties.pool_type.azure_disk.encryption
            encryption.identity = AAZObjectType()
            _CreateHelper._build_schema_managed_service_identity_read(encryption.identity)
            encryption.key_name = AAZStrType(
                serialized_name="keyName",
                flags={"required": True},
            )
            encryption.key_vault_uri = AAZStrType(
                serialized_name="keyVaultUri",
                flags={"required": True},
            )

            elastic_san = cls._schema_on_200_201.properties.pool_type.elastic_san
            elastic_san.encryption = AAZObjectType()
            elastic_san.resource_group = AAZStrType(
                serialized_name="resourceGroup",
                flags={"read_only": True},
            )
            elastic_san.sku_name = AAZStrType(
                serialized_name="skuName",
            )

            encryption = cls._schema_on_200_201.properties.pool_type.elastic_san.encryption
            encryption.identity = AAZObjectType()
            _CreateHelper._build_schema_managed_service_identity_read(encryption.identity)
            encryption.key_name = AAZStrType(
                serialized_name="keyName",
                flags={"required": True},
            )
            encryption.key_vault_uri = AAZStrType(
                serialized_name="keyVaultUri",
                flags={"required": True},
            )

            ephemeral_disk = cls._schema_on_200_201.properties.pool_type.ephemeral_disk
            ephemeral_disk.disks = AAZListType()
            ephemeral_disk.replicas = AAZIntType()

            disks = cls._schema_on_200_201.properties.pool_type.ephemeral_disk.disks
            disks.Element = AAZObjectType()
            _CreateHelper._build_schema_disk_read(disks.Element)

            resources = cls._schema_on_200_201.properties.resources
            resources.requests = AAZObjectType()

            requests = cls._schema_on_200_201.properties.resources.requests
            requests.storage = AAZIntType()

            status = cls._schema_on_200_201.properties.status
            status.message = AAZStrType()
            status.state = AAZStrType(
                flags={"required": True},
            )

            zones = cls._schema_on_200_201.properties.zones
            zones.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_disk_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("id", AAZStrType, ".id", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("reference", AAZStrType, ".reference", typ_kwargs={"flags": {"required": True}})

    @classmethod
    def _build_schema_managed_service_identity_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

        user_assigned_identities = _builder.get(".userAssignedIdentities")
        if user_assigned_identities is not None:
            user_assigned_identities.set_elements(AAZObjectType, ".")

    _schema_disk_read = None

    @classmethod
    def _build_schema_disk_read(cls, _schema):
        if cls._schema_disk_read is not None:
            _schema.id = cls._schema_disk_read.id
            _schema.reference = cls._schema_disk_read.reference
            return

        cls._schema_disk_read = _schema_disk_read = AAZObjectType()

        disk_read = _schema_disk_read
        disk_read.id = AAZStrType(
            flags={"required": True},
        )
        disk_read.reference = AAZStrType(
            flags={"required": True},
        )

        _schema.id = cls._schema_disk_read.id
        _schema.reference = cls._schema_disk_read.reference

    _schema_managed_service_identity_read = None

    @classmethod
    def _build_schema_managed_service_identity_read(cls, _schema):
        if cls._schema_managed_service_identity_read is not None:
            _schema.principal_id = cls._schema_managed_service_identity_read.principal_id
            _schema.tenant_id = cls._schema_managed_service_identity_read.tenant_id
            _schema.type = cls._schema_managed_service_identity_read.type
            _schema.user_assigned_identities = cls._schema_managed_service_identity_read.user_assigned_identities
            return

        cls._schema_managed_service_identity_read = _schema_managed_service_identity_read = AAZObjectType()

        managed_service_identity_read = _schema_managed_service_identity_read
        managed_service_identity_read.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )
        managed_service_identity_read.tenant_id = AAZStrType(
            serialized_name="tenantId",
            flags={"read_only": True},
        )
        managed_service_identity_read.type = AAZStrType(
            flags={"required": True},
        )
        managed_service_identity_read.user_assigned_identities = AAZDictType(
            serialized_name="userAssignedIdentities",
        )

        user_assigned_identities = _schema_managed_service_identity_read.user_assigned_identities
        user_assigned_identities.Element = AAZObjectType()

        _element = _schema_managed_service_identity_read.user_assigned_identities.Element
        _element.client_id = AAZStrType(
            serialized_name="clientId",
            flags={"read_only": True},
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )

        _schema.principal_id = cls._schema_managed_service_identity_read.principal_id
        _schema.tenant_id = cls._schema_managed_service_identity_read.tenant_id
        _schema.type = cls._schema_managed_service_identity_read.type
        _schema.user_assigned_identities = cls._schema_managed_service_identity_read.user_assigned_identities


__all__ = ["Create"]
